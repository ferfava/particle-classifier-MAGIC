library(rpart)
library(rpart.plot)
library(dplyr)
# Leer el archivo sin encabezado
data <- read.csv("magic04.data", header = FALSE)
# Asignar nombres de columnas
colnames(data) <- c("fLength", "fWidth", "fSize", "fConc", "fConc1",
"fAsym", "fM3Long", "fM3Trans", "fAlpha", "fDist", "class")
# Convertir clase a factor (binaria: 'g' y 'h')
data$class <- as.factor(data$class)
# Verificar balance de clases
cat("\n📊 Frecuencia de clases:\n")
print(table(data$class))
set.seed(42)  # reproducibilidad
train_index <- createDataPartition(data$class, p = 0.7, list = FALSE)
set.seed(42)  # reproducibilidad
train_index <- createDataPartition(data$class, p = 0.7, list = FALSE)
# Instalar caret si no lo tienes instalado
install.packages("caret")
# Cargar caret
library(caret)
set.seed(42)
train_index <- createDataPartition(data$class, p = 0.7, list = FALSE)
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
prop.table(table(train_data$class))
prop.table(table(test_data$class))
modelo_arbol <- rpart(class ~ .,
data = train_data,
method = "class",
parms = list(split = "information"),
control = rpart.control(cp = 0.01))  # podés ajustar cp
pred <- predict(modelo_arbol, test_data, type = "class")
cat("\n📉 Matriz de confusión:\n")
conf_mat <- confusionMatrix(pred, test_data$class)
print(conf_mat)
rpart.plot(modelo_arbol,
type = 2,           # tipo de nodo (texto)
extra = 104,        # muestra predicción y % de obs
fallen.leaves = TRUE,
box.palette = "BuGn",
shadow.col = "gray",
main = "Árbol de Decisión - MAGIC Gamma")
cat("\n✅ Accuracy en test: ", round(conf_mat$overall["Accuracy"] * 100, 2), "%\n")
